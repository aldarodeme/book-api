// Code generated by goa v3.13.2, DO NOT EDIT.
//
// book client
//
// Command:
// $ goa gen book-api/design

package book

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "book" service client.
type Client struct {
	CreateEndpoint goa.Endpoint
	UpdateEndpoint goa.Endpoint
	GetOneEndpoint goa.Endpoint
	DeleteEndpoint goa.Endpoint
}

// NewClient initializes a "book" service client given the endpoints.
func NewClient(create, update, getOne, delete_ goa.Endpoint) *Client {
	return &Client{
		CreateEndpoint: create,
		UpdateEndpoint: update,
		GetOneEndpoint: getOne,
		DeleteEndpoint: delete_,
	}
}

// Create calls the "Create" endpoint of the "book" service.
// Create may return the following errors:
//   - "Create book error" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) Create(ctx context.Context, p *BookPayload) (res *BookPayload, err error) {
	var ires any
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*BookPayload), nil
}

// Update calls the "Update" endpoint of the "book" service.
// Update may return the following errors:
//   - "Update book error" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) Update(ctx context.Context, p *BookPayload) (res *BookPayload, err error) {
	var ires any
	ires, err = c.UpdateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*BookPayload), nil
}

// GetOne calls the "GetOne" endpoint of the "book" service.
// GetOne may return the following errors:
//   - "Get book error" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) GetOne(ctx context.Context, p *GetOnePayload) (res *BookPayload, err error) {
	var ires any
	ires, err = c.GetOneEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*BookPayload), nil
}

// Delete calls the "Delete" endpoint of the "book" service.
// Delete may return the following errors:
//   - "Delete book error" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}
