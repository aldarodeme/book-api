// Code generated by goa v3.13.2, DO NOT EDIT.
//
// book HTTP client types
//
// Command:
// $ goa gen book-api/design

package client

import (
	book "book-api/gen/book"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "book" service "Create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	ID                *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title             string `form:"title" json:"title" xml:"title"`
	Author            string `form:"author" json:"author" xml:"author"`
	BookCoverImageURL string `form:"book_cover_image_url" json:"book_cover_image_url" xml:"book_cover_image_url"`
	PublishedAt       string `form:"published_at" json:"published_at" xml:"published_at"`
}

// UpdateRequestBody is the type of the "book" service "Update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	Title             string `form:"title" json:"title" xml:"title"`
	Author            string `form:"author" json:"author" xml:"author"`
	BookCoverImageURL string `form:"book_cover_image_url" json:"book_cover_image_url" xml:"book_cover_image_url"`
	PublishedAt       string `form:"published_at" json:"published_at" xml:"published_at"`
}

// CreateResponseBody is the type of the "book" service "Create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	ID                *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author            *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	BookCoverImageURL *string `form:"book_cover_image_url,omitempty" json:"book_cover_image_url,omitempty" xml:"book_cover_image_url,omitempty"`
	PublishedAt       *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// UpdateResponseBody is the type of the "book" service "Update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	ID                *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author            *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	BookCoverImageURL *string `form:"book_cover_image_url,omitempty" json:"book_cover_image_url,omitempty" xml:"book_cover_image_url,omitempty"`
	PublishedAt       *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// GetOneResponseBody is the type of the "book" service "GetOne" endpoint HTTP
// response body.
type GetOneResponseBody struct {
	ID                *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author            *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	BookCoverImageURL *string `form:"book_cover_image_url,omitempty" json:"book_cover_image_url,omitempty" xml:"book_cover_image_url,omitempty"`
	PublishedAt       *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "Create" endpoint of the "book" service.
func NewCreateRequestBody(p *book.BookPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:                p.ID,
		Title:             p.Title,
		Author:            p.Author,
		BookCoverImageURL: p.BookCoverImageURL,
		PublishedAt:       p.PublishedAt,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "Update" endpoint of the "book" service.
func NewUpdateRequestBody(p *book.BookPayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Title:             p.Title,
		Author:            p.Author,
		BookCoverImageURL: p.BookCoverImageURL,
		PublishedAt:       p.PublishedAt,
	}
	return body
}

// NewCreateBookPayloadOK builds a "book" service "Create" endpoint result from
// a HTTP "OK" response.
func NewCreateBookPayloadOK(body *CreateResponseBody) *book.BookPayload {
	v := &book.BookPayload{
		ID:                body.ID,
		Title:             *body.Title,
		Author:            *body.Author,
		BookCoverImageURL: *body.BookCoverImageURL,
		PublishedAt:       *body.PublishedAt,
	}

	return v
}

// NewUpdateBookPayloadOK builds a "book" service "Update" endpoint result from
// a HTTP "OK" response.
func NewUpdateBookPayloadOK(body *UpdateResponseBody) *book.BookPayload {
	v := &book.BookPayload{
		ID:                body.ID,
		Title:             *body.Title,
		Author:            *body.Author,
		BookCoverImageURL: *body.BookCoverImageURL,
		PublishedAt:       *body.PublishedAt,
	}

	return v
}

// NewGetOneBookPayloadOK builds a "book" service "GetOne" endpoint result from
// a HTTP "OK" response.
func NewGetOneBookPayloadOK(body *GetOneResponseBody) *book.BookPayload {
	v := &book.BookPayload{
		ID:                body.ID,
		Title:             *body.Title,
		Author:            *body.Author,
		BookCoverImageURL: *body.BookCoverImageURL,
		PublishedAt:       *body.PublishedAt,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCoverImageURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book_cover_image_url", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCoverImageURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book_cover_image_url", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}

// ValidateGetOneResponseBody runs the validations defined on GetOneResponseBody
func ValidateGetOneResponseBody(body *GetOneResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCoverImageURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book_cover_image_url", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}
